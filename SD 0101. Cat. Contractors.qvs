СправочникКонтрагенты:
Replace LOAD
	[მინიშნება] AS [%lnk_კონტრაგენტი], //Type: СправочникВидыСчетовБаланса,
	[ჯგუფი] AS [%lnk_კონტრაგენტის ჯგუფი (გაყიდვები)], //Type: СправочникВидыСчетовБаланса,
	[(არ გამოიყენება)] AS [კონტრაგენტი (გაყიდვები)], //Type: СправочникВидыСчетовБаланса,
	[ეს არის ჯგუფი] AS [ეს არის ჯგუფი (გაყიდვები)];
LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_СправочникКонтрагенты.qvd]
(qvd);

СправочникКонтрагентыИерархияPre:
Hierarchy(
	[%lnk_კონტრაგენტი], 
	[%lnk_კონტრაგენტის ჯგუფი (გაყიდვები)], 
	[კონტრაგენტი (გაყიდვები)], 
	[კონტრაგენტის ჯგუფი (გაყიდვები)], 
	[კონტრაგენტი (გაყიდვები)], 
	[კონტრაგენტის ჯგუფების იერარქია (გაყიდვები)], 
	' > ', 
	[კონტრაგენტის ჯგუფის დონე (გაყიდვები)]
)
Replace LOAD
    *
Resident СправочникКонтрагенты
WHERE 
	match ([ეს არის ჯგუფი (გაყიდვები)],'00');

СправочникКонтрагентыИерархия:
Replace Load 
	*,
	1 as [ტემპ2 (იერარქია კონტრაგენტები)],
    [%lnk_კონტრაგენტი] as [%lnk_კონტრაგენტის ჯგუფი]
Resident СправочникКонтрагентыИерархияPre;

Drop Table СправочникКонтрагентыИерархияPre;

СправочникКонтрагентыОбратнаяИерархияPrePreJoinPre:
HierarchyBelongsTo
(
    [%lnk_კონტრაგენტი],
    ANCESTOR_ID,
    [კონტრაგენტი (ბიუჯეტისთვის)],         // store ancestor id
    '%lnk_კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)',
    'კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)'
)
Replace LOAD
    [%lnk_კონტრაგენტი] as [%lnk_კონტრაგენტი],
    [%lnk_კონტრაგენტის ჯგუფი (გაყიდვები)] as ANCESTOR_ID,
    [კონტრაგენტი (გაყიდვები)] as [კონტრაგენტი (ბიუჯეტისთვის)]
RESIDENT СправочникКонтрагенты;

СправочникКонтрагентыОбратнаяИерархияPrePreJoin:
Replace LOAD
	*,
	1 as [ტემპ3 (იერარქია კონტრაგენტები)]
Resident СправочникКонтрагентыОбратнаяИерархияPrePreJoinPre;

Drop Table СправочникКонтрагентыОбратнаяИерархияPrePreJoinPre;

SalesAccess:
Replace LOAD Distinct
	Role as [Sales Access Role],
	Upper(Email) as [Sales Access Email], 
	Group as [Sales Access Group];
SELECT Role,
	Email,
	Group
FROM GetWorksheetV2
WITH PROPERTIES (
worksheetKey='1-f15L80uaVKbMAD786Bp5NHDQlr7IqxFHhQoIBosNWA:_0',
gidOverride='',
generatedNumberedColumns='false',
skipRows=''
);

INNER JOIN (СправочникКонтрагентыОбратнаяИерархияPrePreJoin)          // add USER_EMAIL to the bridge
Replace LOAD
	[Sales Access Role],
    [Sales Access Group]   AS [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    [Sales Access Email]
RESIDENT SalesAccess;

СправочникКонтрагентыОбратнаяИерархияPre:
Replace Load 
	*,
    1 as [ტემპ1 (ბიუჯეტისთვის)]
Resident СправочникКонтрагентыОбратнаяИерархияPrePreJoin;

Drop Table СправочникКонтрагентыОбратнаяИерархияPrePreJoin;

UserDescendants:
NOCONCATENATE
Replace LOAD DISTINCT
	[Sales Access Role],
    [Sales Access Email],
    [%lnk_კონტრაგენტი]                    // descendant the user may see
RESIDENT СправочникКонтрагентыОбратнаяИерархияPre
WHERE Len([Sales Access Email]) and [Sales Access Role] = 'USER'; 

SalesAccessAdminPreJoin:
Replace LOAD
	[Sales Access Role],
    [Sales Access Email]
RESIDENT SalesAccess
WHERE [Sales Access Role] = 'ADMIN';

Left Join(SalesAccessAdminPreJoin)
Replace Load 
	[%lnk_კონტრაგენტი]
Resident СправочникКонтрагенты;

SalesAccessAdmin:
Replace Load 
	*,
    1 as [ტემპ1 (SalesAccess)]
Resident SalesAccessAdminPreJoin;

Drop Table SalesAccessAdminPreJoin;


SECTION ACCESS;
SA:
Replace LOAD
    [Sales Access Role] AS ACCESS,
    [Sales Access Email] AS [USER.EMAIL],
    [%lnk_კონტრაგენტი]
RESIDENT UserDescendants;

Concatenate(SA)
add LOAD
	[Sales Access Role] AS ACCESS,
    [Sales Access Email] AS [USER.EMAIL],
    [%lnk_კონტრაგენტი]
RESIDENT SalesAccessAdmin;

SECTION APPLICATION; 


//drop table СправочникКонтрагентыОбратнаяИерархияPre;

drop table СправочникКонтрагентыОбратнаяИерархияPre;

drop table SalesAccess;

drop table UserDescendants;

drop table SalesAccessAdmin;




СправочникКонтрагентыОбратнаяИерархияПредPreJoinPre:
HierarchyBelongsTo
(
    [%lnk_კონტრაგენტი],
    ANCESTOR_ID,
    [კონტრაგენტი (ბიუჯეტისთვის)],         // store ancestor id
    '%lnk_კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)',
    'კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)'
)
Replace LOAD
    [%lnk_კონტრაგენტი] as [%lnk_კონტრაგენტი],
    [%lnk_კონტრაგენტის ჯგუფი (გაყიდვები)] as ANCESTOR_ID,
    [კონტრაგენტი (გაყიდვები)] as [კონტრაგენტი (ბიუჯეტისთვის)]
RESIDENT СправочникКонтрагенты
WHERE 
	match ([ეს არის ჯგუფი (გაყიდვები)],'00');

СправочникКонтрагентыОбратнаяИерархияПредPreJoin:
Replace LOAD
	*,
	1 as [ტემპ4 (იერარქია კონტრაგენტები)]
Resident СправочникКонтрагентыОбратнаяИерархияПредPreJoinPre;

Drop Table СправочникКонтрагентыОбратнаяИерархияПредPreJoinPre;





drop table СправочникКонтрагенты;

TemporaryCalendar: 
Replace LOAD Distinct
	 (YearStart($(vNow)) + recno() - 1) AS TempDate 
AUTOGENERATE YearEnd($(vNow)) - YearStart($(vNow)) + 1 ;

Inner Join (СправочникКонтрагентыОбратнаяИерархияПредPreJoin)
Replace Load * 
Resident TemporaryCalendar;

Drop Table TemporaryCalendar;

СправочникКонтрагентыОбратнаяИерархияПред:
Replace Load 
	*,
	1 as [ტემპ1 (იერარქია კონტრაგენტები)]
Resident СправочникКонтрагентыОбратнаяИерархияПредPreJoin;

Drop Table СправочникКонтрагентыОбратнаяИерархияПредPreJoin;

СправочникКонтрагентыОбратнаяИерархия:
Replace Load 
	[კონტრაგენტი (ბიუჯეტისთვის)],
    [%lnk_კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    [TempDate] as [პერიოდი (ბიუჯეტისთვის)],
    [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)] & '|' & Date([TempDate],'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
    [%lnk_კონტრაგენტი] & '|' & Date([TempDate],'YYYY-MM-DD') as [%lnk_კონტრაგენტის ჯგუფი_დაგეგმვის პერიოდი]
Resident СправочникКонтрагентыОбратнаяИерархияПред;

Drop Table СправочникКонтрагентыОбратнаяИерархияПред;

//exit script;


СправочникДоговорыКонтрагентов:
Replace LOAD
	[მინიშნება] AS [%lnk_ხელშეკრულება (ანგარიშსწორებები მყიდველებთან)], //Type: СправочникДоговорыКонтрагентов,
	[მყიდველის გადახდის ვადა] AS [მყიდველის გადახდის ვადა (ხელშეკრულებები,ცნობარი)],
	[ხელშეკრულების №] AS [ხელშეკრულების № (ხელშეკრულებები,ცნობარი)],
	// [ხელშეკრულების ტიპი] AS [%lnk_ხელშეკრულების ტიპი (ხელშეკრულებები,ცნობარი)], //Type: ПеречислениеВидыДоговоров,
	// ApplyMap('MapПеречислениеВидыДоговоров',[ხელშეკრულების ტიპი],Null()) AS [ხელშეკრულების ტიპი (ხელშეკრულებები,ცნობარი)],
	[კოდი] AS [კოდი (ხელშეკრულებები,ცნობარი)],
	ApplyMap('MapЛимитыКонтрагентов',[მინიშნება],Null()) AS [საკრედიტო ლიმიტი (ხელშეკრულებები,ცნობარი)];
LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_СправочникДоговорыКонтрагентов.qvd]
(qvd);

СправочникДоговорыКонтрагентовПрисоединенныеФайлы:
Replace LOAD
	[ფაილის მფლობელი] AS [%lnk_ხელშეკრულება (ანგარიშსწორებები მყიდველებთან)], //Type: СправочникДоговорыКонтрагентов,
	[Наименование] AS [მიმაგრებული ფაილი (მიერთებული ფაილები (კონტრაგენტისშეთანხმებები),ცნობარი)];
LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_СправочникДоговорыКонтрагентовПрисоединенныеФайлы.qvd]
(qvd);

MapВтораяГруппаГруппыКонтрагента:
Mapping Replace LOAD
	[%lnk_კონტრაგენტი],
	[კონტრაგენტი (გაყიდვები)2]	
Resident СправочникКонтрагентыИерархия;

СправочникКонтрагентыPre:
Replace LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_СправочникКонтрагенты.qvd]
(qvd);

MapЛимитАктивностиКонтрагента:
Mapping Replace LOAD
    [(არ გამოიყენება)],
    [აქტიურობის დღეების ლიმიტი]
Resident СправочникКонтрагентыPre;

MapЛимитПассивностиКонтрагента:
Mapping Replace LOAD
    [(არ გამოიყენება)],
    [პასიურობის დღეების ლიმიტი]
Resident СправочникКонтрагентыPre;

Drop Table СправочникКонтрагентыPre;