Let vNow = Floor(now());

ТипЗапасыTMP:
LOAD * Inline [
'აღრიცხვის ანგარიშის ტიპიTemp'
'მარაგები'
];

РегистрНакопленияЗапасыTemp:
LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_РегистрНакопленияЗапасы-*.qvd]
(qvd);

РегистрНакопленияЗапасыPre:
LOAD
    Date(DayStart(AddYears([Период],-2000)),'DD/MM/YYYY') as [პერიოდი],
	[ორგანიზაცია] as [ორგანიზაცია],
	[სტრუქტურული ერთეული] as [სტრუქტურული ერთეული],
	[აღრიცხვის ანგარიში] as [აღრიცხვის ანგარიში],
	[ნომენკლატურა] as [ნომენკლატურა],
	[პარტია] as [პარტია],
	[მყიდველის შეკვეთა] as [მყიდველის შეკვეთა],
	[მახასიათებელი] as [მახასიათებელი],
	AutoNumberHash128(
		[ორგანიზაცია],
		[სტრუქტურული ერთეული],
		[აღრიცხვის ანგარიში],
		[ნომენკლატურა],
		[პარტია],
		[მყიდველის შეკვეთა],
		[მახასიათებელი]
	) as [ნაშთების ჭრილი],
    round(Sum(If([ВидДвижения] = 1, -1, 1) * round([რაოდენობა],0.001)),0.001) AS [რაოდენობა],
	round(Sum(If([ВидДвижения] = 1, -1, 1) * round([თანხა],0.01)),0.01) AS [თანხა]    
Resident РегистрНакопленияЗапасыTemp
Where	
	floor(AddYears([Период],-2000)) <= $(vNow)
	and Exists([აღრიცხვის ანგარიშის ტიპიTemp],ApplyMap('MapПланСчетовУправленческийТипСчета',[აღრიცხვის ანგარიში],Null()))
Group By 
	Date(DayStart(AddYears([Период],-2000)),'DD/MM/YYYY'),
	[ორგანიზაცია],
	[სტრუქტურული ერთეული],
	[აღრიცხვის ანგარიში],
	[ნომენკლატურა],
	[პარტია],
	[მყიდველის შეკვეთა],
	[მახასიათებელი];


РегистрНакопленияЗапасыВысчетОстатковTemp:
LOAD
	RowNo() as [RowNo],
	[პერიოდი] as [პერიოდი],
	[ორგანიზაცია] as [ორგანიზაცია],
	[სტრუქტურული ერთეული] as [სტრუქტურული ერთეული],
	[აღრიცხვის ანგარიში] as [აღრიცხვის ანგარიში],
	[ნომენკლატურა] as [ნომენკლატურა],
	[პარტია] as [პარტია],
	[მყიდველის შეკვეთა] as [მყიდველის შეკვეთა],
	[მახასიათებელი] as [მახასიათებელი],
	AutoNumberHash128(
		[ორგანიზაცია],
		[სტრუქტურული ერთეული],
		[აღრიცხვის ანგარიში],
		[ნომენკლატურა],
		[პარტია],
		[მყიდველის შეკვეთა],
		[მახასიათებელი]
	) as [ნაშთების ჭრილი],
    round(if([ნაშთების ჭრილი]=peek([ნაშთების ჭრილი]), [რაოდენობა]+peek([რაოდენობა ნაშთი]), [რაოდენობა]),0.001) AS [რაოდენობა ნაშთი],
    round(if([ნაშთების ჭრილი]=peek([ნაშთების ჭრილი]), [თანხა]+peek([თანხა ნაშთი]), [თანხა]),0.01) AS [თანხა ნაშთი]
Resident РегистрНакопленияЗапасыPre
Order By
	[ნაშთების ჭრილი],
    [პერიოდი] asc;

Drop Table РегистрНакопленияЗапасыPre;

РегистрНакопленияЗапасыВысчетОстатков:
LOAD
	[პერიოდი] as [პერიოდი],
	[ორგანიზაცია] as [ორგანიზაცია],
	[სტრუქტურული ერთეული] as [სტრუქტურული ერთეული],
	[აღრიცხვის ანგარიში] as [აღრიცხვის ანგარიში],
	[ნომენკლატურა] as [ნომენკლატურა],
	[პარტია] as [პარტია],
	[მყიდველის შეკვეთა] as [მყიდველის შეკვეთა],
	[მახასიათებელი] as [მახასიათებელი],
	[ნაშთების ჭრილი] as [ნაშთების ჭრილი],
    [რაოდენობა ნაშთი] as [რაოდენობა ნაშთი],
    [თანხა ნაშთი] AS [თანხა ნაშთი],
    [პერიოდი] as [ინტერვალის დაწყების თარიღი],
    if([ნაშთების ჭრილი]=peek([ნაშთების ჭრილი]), date(peek([პერიოდი])-1,'DD/MM/YYYY'), IF(Round([რაოდენობა ნაშთი],0.001) = 0 and Round([თანხა ნაშთი],0.01) = 0, [პერიოდი], $(vNow))) as [ინტერვალის დასრულების თარიღი],
    date([პერიოდი],'YYYY/MM/DD') & '|' & date(if([ნაშთების ჭრილი]=peek([ნაშთების ჭრილი]), date(peek([პერიოდი])-1,'DD/MM/YYYY'), IF(Round([რაოდენობა ნაშთი],0.001) = 0 and Round([თანხა ნაშთი],0.01) = 0, [პერიოდი], date($(vNow)))),'YYYY/MM/DD') as [ინტერვალი],
    AutoNumber(date([პერიოდი],'YYYY/MM/DD') & '|' & date(if([ნაშთების ჭრილი]=peek([ნაშთების ჭრილი]), date(peek([პერიოდი])-1,'DD/MM/YYYY'), IF(Round([რაოდენობა ნაშთი],0.001) = 0 and Round([თანხა ნაშთი],0.01) = 0, [პერიოდი], date($(vNow)))),'YYYY/MM/DD')) as [ინტერვალის იდენტიფიკატორი]
Resident РегистрНакопленияЗапасыВысчетОстатковTemp
Order By
	[RowNo] desc;
    
drop table РегистрНакопленияЗапасыВысчетОстатковTemp;    





////////////////////// Interval Match /////////////////////////////

Интервалы:
LOAD Distinct
  [ინტერვალის დაწყების თარიღი] AS [ინტერვალის დაწყების თარიღი],
  [ინტერვალის დასრულების თარიღი] AS [ინტერვალის დასრულების თარიღი]
Resident РегистрНакопленияЗапасыВысчетОстатков;


ДатыНачалаИОкончанияИнтервалов:
Load
	Min([ინტერვალის დაწყების თარიღი]) as MinDate,
    Max([ინტერვალის დასრულების თარიღი]) as MaxDate
Resident Интервалы;

let vMinDate = peek('MinDate',0,'ДатыНачалаИОкончанияИнтервалов') ;
let vMaxDate = NUM($(vNow));//peek('MaxDate',0,'ДатыНачалаИОкончанияИнтервалов') ;

drop table ДатыНачалаИОкончанияИнтервалов;

NoConcatenate
ДниИнтервалов:
Load
	$(vMinDate) + RowNo() - 1 as [ინტერვალის დღე]
AutoGenerate ($(vMaxDate) - $(vMinDate)+1);


Inner Join IntervalMatch ([ინტერვალის დღე])
Load Distinct 
  [ინტერვალის დაწყების თარიღი],
  [ინტერვალის დასრულების თარიღი]
Resident Интервалы;

drop table Интервалы;

Left Join(РегистрНакопленияЗапасыВысчетОстатков)
Load Distinct
  AutoNumber(date([ინტერვალის დაწყების თარიღი],'YYYY/MM/DD')&'|'&date([ინტერვალის დასრულების თარიღი],'YYYY/MM/DD')) as [ინტერვალის იდენტიფიკატორი],
  [ინტერვალის დღე] as [ინტერვალის დღე]
Resident ДниИнтервалов;

drop table ДниИнтервалов;





РегистрНакопленияЗапасы:
LOAD
	floor([ინტერვალის დღე]) AS StockDate,
    [ნაშთების ჭრილი],
	[ორგანიზაცია] & '|' & [ნომენკლატურა] & '|' & floor([ინტერვალის დღე]) & '|' & 0 as [ორგანიზაცია_ნომენკლატურა_პერიოდი_ნაშთია],
    0 as [ნაშთია (მარაგები)],
	[ინტერვალის დღე] AS [პერიოდი (მარაგები)],
    [ინტერვალის დაწყების თარიღი],
    [ინტერვალის დასრულების თარიღი],
    [ინტერვალის იდენტიფიკატორი],
    [ინტერვალი],
	[ორგანიზაცია] AS [%lnk_ორგანიზაცია (მარაგები)], //Type: СправочникОрганизации,
	ApplyMap('MapСправочникОрганизации',[ორგანიზაცია],Null()) AS [ორგანიზაცია (მარაგები)],
	[სტრუქტურული ერთეული] AS [%lnk_სტრუქტურული ერთეული (მარაგები)], //Type: СправочникСтруктурныеЕдиницы,СправочникКонтрагенты,
	ApplyMap('MapСправочникСтруктурныеЕдиницы',[სტრუქტურული ერთეული],Null()) AS [სტრუქტურული ერთეული (მარაგები)],
	[აღრიცხვის ანგარიში] AS [%lnk_აღრიცხვის ანგარიში (მარაგები)], //Type: ПланСчетовУправленческий,
	ApplyMap('MapПланСчетовУправленческий',[აღრიცხვის ანგარიში],Null()) AS [აღრიცხვის ანგარიში (მარაგები)],
	[ნომენკლატურა] AS [%lnk_ნომენკლატურა (მარაგები)], //Type: СправочникНоменклатура,
	ApplyMap('MapСправочникНоменклатура',[ნომენკლატურა],Null()) AS [ნომენკლატურა (მარაგები)],
	[პარტია] AS [%lnk_პარტია (მარაგები)], //Type: СправочникПартииНоменклатуры,
	ApplyMap('MapСправочникПартииНоменклатуры',[პარტია],Null()) AS [პარტია (მარაგები)],
	[მყიდველის შეკვეთა] AS [%lnk_მყიდველის შეკვეთა (მარაგები)], //Type: ДокументЗаказПокупателя,
	[მახასიათებელი] AS [%lnk_მახასიათებელი (მარაგები)], //Type: СправочникХарактеристикиНоменклатуры,
	ApplyMap('MapСправочникХарактеристикиНоменклатуры',[მახასიათებელი],Null()) AS [მახასიათებელი (მარაგები)],
	[რაოდენობა ნაშთი] AS [რაოდენობა (მარაგები, ნაშთი)],
    [რაოდენობა ნაშთი] AS [რაოდენობა (მარაგები, ნაშთი, ნოლებით)],
    if(not ApplyMap('MapСправочникНоменклатураГраницаМетража',[ნომენკლატურა],0) = 0 and ApplyMap('MapСправочникНоменклатураГраницаМетража',[ნომენკლატურა],0) > [რაოდენობა ნაშთი], [თანხა ნაშთი], 0) AS [თანხა მეტრაჟი (მარაგები, ნაშთი)],
	if(not ApplyMap('MapСправочникНоменклатураГраницаМетража',[ნომენკლატურა],0) = 0 and ApplyMap('MapСправочникНоменклатураГраницаМетража',[ნომენკლატურა],0) > [რაოდენობა ნაშთი], 'მეტრაჟი', 'მთლიანი') AS [მეტრაჟის ტიპი (მარაგები, ნაშთი)],
	[თანხა ნაშთი] AS [თანხა (მარაგები, ნაშთი)],
    ApplyMap('АктивныеМинМаксы',[სტრუქტურული ერთეული] & '|' & [ნომენკლატურა],'03') AS [MinMaxExists  (მარაგები)]
Resident РегистрНакопленияЗапасыВысчетОстатков;
//where 
//	[ინტერვალის დღე] >= YearStart(YearStart($(vNow))-1);
    
Drop Table РегистрНакопленияЗапасыВысчетОстатков;












Concatenate(РегистрНакопленияЗапасы)
LOAD
	floor(Date(DayStart(AddYears([Период],-2000)),'DD/MM/YYYY')) AS StockDate,
	[ორგანიზაცია] & '|' & [ნომენკლატურა] & '|' & floor(Date(DayStart(AddYears([Период],-2000)),'DD/MM/YYYY')) & '|' & 0 as [ორგანიზაცია_ნომენკლატურა_პერიოდი_ნაშთია],
    0 as [ნაშთია (მარაგები)],
	Date(DayStart(AddYears([Период],-2000)),'DD/MM/YYYY') AS [პერიოდი (მარაგები)],
	[ორგანიზაცია] AS [%lnk_ორგანიზაცია (მარაგები)], //Type: СправочникОрганизации,
	ApplyMap('MapСправочникОрганизации',[ორგანიზაცია],Null()) AS [ორგანიზაცია (მარაგები)],
	[სტრუქტურული ერთეული] AS [%lnk_სტრუქტურული ერთეული (მარაგები)], //Type: СправочникСтруктурныеЕдиницы,СправочникКонтрагенты,
	ApplyMap('MapСправочникСтруктурныеЕдиницы',[სტრუქტურული ერთეული],Null()) AS [სტრუქტურული ერთეული (მარაგები)],
	[აღრიცხვის ანგარიში] AS [%lnk_აღრიცხვის ანგარიში (მარაგები)], //Type: ПланСчетовУправленческий,
	ApplyMap('MapПланСчетовУправленческий',[აღრიცხვის ანგარიში],Null()) AS [აღრიცხვის ანგარიში (მარაგები)],
	[ნომენკლატურა] AS [%lnk_ნომენკლატურა (მარაგები)], //Type: СправочникНоменклатура,
	ApplyMap('MapСправочникНоменклатура',[ნომენკლატურა],Null()) AS [ნომენკლატურა (მარაგები)],
	[პარტია] AS [%lnk_პარტია (მარაგები)], //Type: СправочникПартииНоменклатуры,
	ApplyMap('MapСправочникПартииНоменклатуры',[პარტია],Null()) AS [პარტია (მარაგები)],
	[მყიდველის შეკვეთა] AS [%lnk_მყიდველის შეკვეთა (მარაგები)], //Type: ДокументЗаказПокупателя,
	[მახასიათებელი] AS [%lnk_მახასიათებელი (მარაგები)], //Type: СправочникХарактеристикиНоменклатуры,
	ApplyMap('MapСправочникХарактеристикиНоменклатуры',[მახასიათებელი],Null()) AS [მახასიათებელი (მარაგები)],
	[ВидДвижения] as [მოძრაობის ტიპი (მარაგები)],
    If([ВидДвижения] = 1, -1, 1) * [რაოდენობა] AS [რაოდენობა (მარაგები)],
	If([ВидДвижения] = 1, -1, 1) * [თანხა] AS [თანხა (მარაგები)],
    ApplyMap('АктивныеМинМаксы',[სტრუქტურული ერთეული] & '|' & [ნომენკლატურა],'03') AS [MinMaxExists  (მარაგები)]
Resident РегистрНакопленияЗапасыTemp
Where	
	floor(AddYears([Период],-2000)) <= $(vNow)
	and Exists([აღრიცხვის ანგარიშის ტიპიTemp],ApplyMap('MapПланСчетовУправленческийТипСчета',[აღრიცხვის ანგარიში],Null()));

Drop Table ТипЗапасыTMP;

Drop Table РегистрНакопленияЗапасыTemp;




TemporaryCalendarTemp: 
LOAD 
	 $(vMinDateTemp) + recno() - 1 AS TempDate 
AUTOGENERATE if(isnull(vMaxDateTemp) or isnull(vMinDateTemp),0,$(vMaxDateTemp) - $(vMinDateTemp) + 1);

РегистрНакопленияЗапасыНоменклатураСклад:
Load distinct
	[ნაშთია (მარაგები)],
	[%lnk_ნომენკლატურა (მარაგები)], //Type: СправочникНоменклатура,
    [ნომენკლატურა (მარაგები)],
    [%lnk_ორგანიზაცია (მარაგები)], //Type: СправочникОрганизации,
	[ორგანიზაცია (მარაგები)],
	[%lnk_სტრუქტურული ერთეული (მარაგები)],
	[სტრუქტურული ერთეული (მარაგები)]
Resident РегистрНакопленияЗапасы
Where	
	False() and
	[StockDate] >= $(vMinDateTemp) ;

Left Join (РегистрНакопленияЗапасыНоменклатураСклад)
Load
	*
Resident TemporaryCalendarTemp;

Drop Table TemporaryCalendarTemp;

//drop table РегистрНакопленияПродажи;

Concatenate(РегистрНакопленияЗапасы)
//РегистрНакопленияПродажи:
LOAD
	floor(Date(DayStart(TempDate),'DD/MM/YYYY')) AS StockDate,
	[%lnk_ორგანიზაცია (მარაგები)] & '|' & [%lnk_ნომენკლატურა (მარაგები)] & '|' & floor(Date(DayStart(TempDate),'DD/MM/YYYY')) & '|' & 0 as [ორგანიზაცია_ნომენკლატურა_პერიოდი_ნაშთია],
    [ნაშთია (მარაგები)],
    Date(DayStart(TempDate),'DD/MM/YYYY') AS [პერიოდი (მარაგები)],
	[%lnk_ნომენკლატურა (მარაგები)], //Type: СправочникНоменклатура,
    [ნომენკლატურა (მარაგები)],
    [%lnk_ორგანიზაცია (მარაგები)], //Type: СправочникОрганизации,
	[ორგანიზაცია (მარაგები)],
	[%lnk_სტრუქტურული ერთეული (მარაგები)], //Type: СправочникСтруктурныеЕдиницы,СправочникКонтрагенты,
	[სტრუქტურული ერთეული (მარაგები)],
	0 AS [რაოდენობა (მარაგები, ნაშთი, ნოლებით)],
    ApplyMap('АктивныеМинМаксы',[%lnk_სტრუქტურული ერთეული (მარაგები)] & '|' & [%lnk_ნომენკლატურა (მარაგები)],'03') AS [MinMaxExists  (მარაგები)]
Resident РегистрНакопленияЗапасыНоменклатураСклад;

Drop Table РегистрНакопленияЗапасыНоменклатураСклад;
