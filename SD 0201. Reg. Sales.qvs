РегистрНакопленияПродажиPre:
Replace LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_РегистрНакопленияПродажи-Empty.qvd]
(qvd);

РегистрНакопленияПродажиPre:
Add LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_РегистрНакопленияПродажи-*.qvd]
(qvd);

MapПоследняяПродажаКонтрагента:
Mapping Replace LOAD
	if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))) as [%lnk_კონტრაგენტი (გაყიდვები)],
	// ApplyMap('MapЛимитАктивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0) as [აქვტიურობის ლიმიტი (გაყიდვები)],
	// ApplyMap('MapЛимитПассивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0) as [პასიურობის ლიმიტი (გაყიდვები)],
    // if(max(floor(AddYears([Период],-2000))) >= $(vNow)-14,'აქტიური',
    // if(max(floor(AddYears([Период],-2000))) < $(vNow)-14 and max(floor(AddYears([Период],-2000))) >= AddMonths($(vNow),-1),'პასიური',
    // if(max(floor(AddYears([Период],-2000))) < AddMonths($(vNow),-1),'დაკარგული'
	// )))  as [კონტრაგენტის კატეგორია],
    if(max(floor(AddYears([Период],-2000))) >= $(vNow)-ApplyMap('MapЛимитАктивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0),'აქტიური',
    if(max(floor(AddYears([Период],-2000))) < $(vNow)-ApplyMap('MapЛимитАктивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0) and max(floor(AddYears([Период],-2000))) >= $(vNow) - ApplyMap('MapЛимитПассивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0),'პასიური',
    if(max(floor(AddYears([Период],-2000))) < $(vNow) - ApplyMap('MapЛимитПассивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0),'დაკარგული'
	)))  as [კონტრაგენტის კატეგორია]
Resident РегистрНакопленияПродажиPre
where 
	not [თანხა] = 0
	and floor(AddYears([Период],-2000)) <= $(vNow)
	and floor(AddYears([Период],-2000)) >= YearStart(YearStart($(vNow))-1)
	and match([ორგანიზაცია],
    '85070A94EF044E4711EB87F29D540806', // elvare
    '80C6382C4ABBB43711E7363EBFB98EBD', // electric
    '8653D4F5EF3EE94F11EED6FFAF64F778' // elcom
    ) > 0
group by 
	if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))),
	ApplyMap('MapЛимитАктивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0),
	$(vNow) - ApplyMap('MapЛимитПассивностиКонтрагента',ApplyMap('MapВтораяГруппаГруппыКонтрагента',ApplyMap('MapСправочникКонтрагентыГруппа',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()), Null()), 0);

РегистрНакопленияПродажи:
Replace LOAD
	floor(Date(AddYears([Период],-2000),'DD/MM/YYYY HH:mm:ss')) AS SalesDate,
	[ორგანიზაცია] & '|' & if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))) & '|' & floor(Date(AddYears([Период],-2000),'DD/MM/YYYY HH:mm:ss')) & '|' & 0 as [ორგანიზაცია_კონტრაგენტი_პერიოდი_ნაშთია],
    0 as [ნაშთია (გაყიდვები)],
    Date(AddYears([Период],-2000),'DD/MM/YYYY HH:mm:ss') AS [პერიოდი (გაყიდვები)],
	[Регистратор] AS [%lnk_რეგისტრატორი (გაყიდვები)], //Type: ДокументКорректировкаРегистров,ДокументПередачаВА,ДокументКорректировкаРеализации,ДокументРасходнаяНакладная,ДокументОтчетКомиссионера,ДокументКРОНТО_ЗачетДолга,ДокументПриходнаяНакладная,ДокументАктВыполненныхРабот,ДокументРасходСоСчета,ДокументЧекККМ,ДокументОтчетОПереработке,ДокументПоступлениеВКассу,ДокументЗаказПокупателя,ДокументПриемИПередачаВРемонт,ДокументОтчетОРозничныхПродажах,ДокументРасходИзКассы,ДокументВзаимозачет,ДокументЗакрытиеМесяца,ДокументПредварительныйЗаказПокупателя,ДокументПоступлениеНаСчет,ДокументВводНачальныхОстатков,ДокументОперацияПоПлатежнымКартам,
	[დოკუმენტი] AS [%lnk_დოკუმენტი (გაყიდვები)], //Type: ДокументРасходнаяНакладная,ДокументОтчетКомиссионера,ДокументПриходнаяНакладная,ДокументАктВыполненныхРабот,ДокументЧекККМ,ДокументОтчетОПереработке,ДокументАвансовыйОтчет,ДокументЗаказПокупателя,ДокументОтчетОРозничныхПродажах,ДокументОтчетКомитенту,
	ApplyMap('MapДокументРасходнаяНакладнаяАвтор', [დოკუმენტი], Null()) AS [ავტორი (გაყიდვები)], //Type: СправочникПользователи,
	if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))) AS [%lnk_კონტრაგენტი (გაყიდვები)], //Type: СправочникКонтрагенты,
    ApplyMap('MapПоследняяПродажаКонтрагента', if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))), Null()) AS [კონტრაგენტის კატეგორია],
	//ApplyMap('MapСправочникКонтрагенты',if(ApplyMap('MapСправочникКонтрагентыДополнительныеРеквизитыInternal',[კონტრაგენტი],'არა') = 'კი', [კონტრაგენტი], ApplyMap('MapДокументРасходнаяНакладнаяУчастникКэшбека',[დოკუმენტი],ApplyMap('MapСправочникКонтрагентыКонтрагентРодитель',[კონტრაგენტი],[კონტრაგენტი]))),Null()) AS [კონტრაგენტი (გაყიდვები)],
    [ნომენკლატურა] AS [%lnk_ნომენკლატურა (გაყიდვები)], //Type: СправочникНоменклатура,
	[ორგანიზაცია] AS [%lnk_ორგანიზაცია (გაყიდვები)], //Type: СправочникОрганизации,
	ApplyMap('MapСправочникОрганизации',[ორგანიზაცია],Null()) AS [ორგანიზაცია (გაყიდვები)],
	[დოკუმენტი] & '|' & [ნომენკლატურა] AS [%lnk_დოკუმენტი_ნომენკლატურა (გაყიდვები)],
	[რაოდენობა] AS [რაოდენობა (გაყიდვები)],
	[თანხა] - [მ.შ. დღგ] AS [თანხა (გაყიდვები)],
	[მ.შ. დღგ] AS [დღგ (გაყიდვები)],
	[თვითღირებულება] AS [თვითღირებულება (გაყიდვები)],
    ApplyMap('MapДокументРасходнаяНакладнаяСклад',[დოკუმენტი],null()) as [%lnk_საწყობი (გაყიდვები)],
    ApplyMap('MapСправочникСтруктурныеЕдиницы', ApplyMap('MapДокументРасходнаяНакладнаяСклад',[დოკუმენტი],null()),null()) as [საწყობი (გაყიდვები)],
    ApplyMap('MapЛокация', ApplyMap('MapСправочникСтруктурныеЕдиницы', ApplyMap('MapДокументРасходнаяНакладнаяСклад',[დოკუმენტი],null()),null()),'ლოკაციის გარეშე') as [ლოკაცია (გაყიდვები)]
Resident РегистрНакопленияПродажиPre
where 
	floor(AddYears([Период],-2000)) <= $(vNow)
	and floor(AddYears([Период],-2000)) >= YearStart(YearStart($(vNow))-1)
	and match([ორგანიზაცია],
    '85070A94EF044E4711EB87F29D540806', // elvare
    '80C6382C4ABBB43711E7363EBFB98EBD', // electric
    '8653D4F5EF3EE94F11EED6FFAF64F778' // elcom
    ) > 0;

Drop Table РегистрНакопленияПродажиPre;



ДокументРасходнаяНакладнаяЗапасыPre:
Replace LOAD
    *
FROM [lib://$(vSpace):DataFiles/$(vSpacePrefix)_$(vPrefix)_ДокументРасходнаяНакладнаяЗапасы.qvd]
(qvd);

ДокументРасходнаяНакладнаяЗапасы:
Replace LOAD
	[მინიშნება] & '|' & [ნომენკლატურა] AS [%lnk_დოკუმენტი_ნომენკლატურა (გაყიდვები)], //Type: ДокументРасходнаяНакладная,
	if([თანხა] = [სულ], [თანხა ავტ.] * 18 / 118, [თანხა ავტ.])  AS [ფასდაკლება (ავტ.) (გაყიდვები)],
	if([თანხა] = [სულ], [რაოდენობა] * [ფასდაკლება ერთეულზე] * 18 / 118, [რაოდენობა] * [ფასდაკლება ერთეულზე]) AS [ფასდაკლება (ხელ.) (გაყიდვები)]
Resident ДокументРасходнаяНакладнаяЗапасыPre;

Drop Table ДокументРасходнаяНакладнаяЗапасыPre;









SalesPlanFromSheets:
Crosstable(Date, Value, 1)
Replace LOAD *;

SELECT 
	*
FROM GetWorksheetV2
WITH PROPERTIES (
worksheetKey='122fWdPTf07o9kDdRXfktilXE6iq8ION8aZV1WaS-bxo:_0',
gidOverride='',
generatedNumberedColumns='false',
skipRows=''
);

ПланПродажПоГруппамPreJoin:
Replace Load
	//[სეგმენტი] as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    Date#([Date],'YYYY-MM-DD') as [დაგეგმვის პერიოდი],
    [სეგმენტი],
    [Value]
Resident SalesPlanFromSheets
where floor(Date#([Date], 'YYYY-MM-DD')) >= YearStart($(vNow))
;

drop table SalesPlanFromSheets;



ДниИнтерваловПланаПродаж:
Replace Load
	MonthStart(YearStart($(vNow)) + RowNo() - 1) as [დაგეგმვის პერიოდი],
	YearStart($(vNow)) + RowNo() - 1 as [გეგმის ინტერვალის დღე],
    (Floor(MonthEnd(YearStart($(vNow)) + RowNo() - 1)) - Floor(MonthStart(YearStart($(vNow)) + RowNo() - 1)) + 1) - ApplyMap('MapВыходныеПоМесяцам', MonthStart(YearStart($(vNow)) + RowNo() - 1), 0) as [დღეების რაოდენობა თვეში]
AutoGenerate (YearEnd($(vNow))  - YearStart($(vNow)) +1);

Left Join(ПланПродажПоГруппамPreJoin)
Replace Load
  *
Resident ДниИнтерваловПланаПродаж;

Drop Table ДниИнтерваловПланаПродаж;

ПланПродажПоГруппам:
Replace Load
	[სეგმენტი] & '|' & Date([გეგმის ინტერვალის დღე],'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
	([Value]/[დღეების რაოდენობა თვეში]) * ApplyMap('MapВыходныеПоДням', [გეგმის ინტერვალის დღე], 1) as [გაყიდვები (გეგმა)]
Resident ПланПродажПоГруппамPreJoin;

Drop Table ПланПродажПоГруппамPreJoin;











ProfitPlanFromSheets:
Crosstable(Date, Value, 1)
Replace LOAD *;

SELECT 
	*
FROM GetWorksheetV2
WITH PROPERTIES (
worksheetKey='122fWdPTf07o9kDdRXfktilXE6iq8ION8aZV1WaS-bxo:_1988986721',
gidOverride='',
generatedNumberedColumns='false',
skipRows=''
);

ПланПрибылиПоГруппамPreJoin:
Replace Load
	//[სეგმენტი] as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    Date#([Date],'YYYY-MM-DD') as [დაგეგმვის პერიოდი],
    [სეგმენტი],
    [Value]
Resident ProfitPlanFromSheets
where floor(Date#([Date], 'YYYY-MM-DD')) >= YearStart($(vNow))
;

drop table ProfitPlanFromSheets;

ДниИнтерваловПланаПрибыли:
Replace Load
	MonthStart(YearStart($(vNow)) + RowNo() - 1) as [დაგეგმვის პერიოდი],
	YearStart($(vNow)) + RowNo() - 1 as [გეგმის ინტერვალის დღე],
    (Floor(MonthEnd(YearStart($(vNow)) + RowNo() - 1)) - Floor(MonthStart(YearStart($(vNow)) + RowNo() - 1)) + 1) - ApplyMap('MapВыходныеПоМесяцам', MonthStart(YearStart($(vNow)) + RowNo() - 1), 0) as [დღეების რაოდენობა თვეში]
AutoGenerate (YearEnd($(vNow))  - YearStart($(vNow)) +1);

Left Join(ПланПрибылиПоГруппамPreJoin)
Replace Load
  *
Resident ДниИнтерваловПланаПрибыли;

Drop Table ДниИнтерваловПланаПрибыли;

ПланПрибылиПоГруппам:
Replace Load
	[სეგმენტი] & '|' & Date([გეგმის ინტერვალის დღე],'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
	([Value]/[დღეების რაოდენობა თვეში]) * ApplyMap('MapВыходныеПоДням', [გეგმის ინტერვალის დღე], 1) as [ამონაგები (გეგმა)]
Resident ПланПрибылиПоГруппамPreJoin;

Drop Table ПланПрибылиПоГруппамPreJoin;























DebitorsDSOPlanFromSheets:
Crosstable(Date, Value, 1)
Replace LOAD *;

SELECT 
	*
FROM GetWorksheetV2
WITH PROPERTIES (
worksheetKey='122fWdPTf07o9kDdRXfktilXE6iq8ION8aZV1WaS-bxo:_805094071',
gidOverride='',
generatedNumberedColumns='false',
skipRows=''
);

ПланDSOДебиторовПоГруппам:
Replace Load
	//[სეგმენტი] as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    //[Date] as [დაგეგმვის პერიოდი],
	[სეგმენტი] & '|' & Date(Date#([Date],'YYYY-MM-DD'),'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
	if(num(month(Date#([Date],'YYYY-MM-DD'))) = num(month($(vNow))),
    	(Floor($(vNow)) - Floor(MonthStart($(vNow))) + 1)/(Floor(MonthEnd($(vNow))) - Floor(MonthStart($(vNow))) + 1),
    	1)*[Value] as [დებიტორი DSO (გეგმა)]
Resident DebitorsDSOPlanFromSheets
where floor(Date#([Date], 'YYYY-MM-DD')) >= YearStart($(vNow))
;

drop table DebitorsDSOPlanFromSheets;



// StockDSOPlanFromSheets:
// Crosstable(Date, Value, 1)
// Replace LOAD *;

// SELECT 
// 	*
// FROM GetWorksheetV2
// WITH PROPERTIES (
// worksheetKey='122fWdPTf07o9kDdRXfktilXE6iq8ION8aZV1WaS-bxo:_1105554067',
// gidOverride='',
// generatedNumberedColumns='false',
// skipRows=''
// );

// ПланDSOЗапасовПоГруппам:
// Replace Load
// 	//[კატეგორია] as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
//     //[Date] as [დაგეგმვის პერიოდი],
// 	[კატეგორია] & '|' & Date(Date#([Date],'YYYY-MM-DD'),'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
// 	if(num(month(Date#([Date],'YYYY-MM-DD'))) = num(month($(vNow))),
//     	(Floor($(vNow)) - Floor(MonthStart($(vNow))) + 1)/(Floor(MonthEnd($(vNow))) - Floor(MonthStart($(vNow))) + 1),
//     	1)*[Value] as [მარაგები DSO (გეგმა)]
// Resident StockDSOPlanFromSheets
// where floor(Date#([Date], 'YYYY-MM-DD')) <= $(vNow)
// and floor(Date#([Date], 'YYYY-MM-DD')) >= YearStart($(vNow))
// ;

// drop table StockDSOPlanFromSheets;



ClientsPlanFromSheets:
Crosstable(Date, Value, 1)
Replace LOAD *;

SELECT 
	*
FROM GetWorksheetV2
WITH PROPERTIES (
worksheetKey='122fWdPTf07o9kDdRXfktilXE6iq8ION8aZV1WaS-bxo:_458971746',
gidOverride='',
generatedNumberedColumns='false',
skipRows=''
);

ПланКлиентыПоГруппам:
Replace Load
	//[სეგმენტი] as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)],
    //[Date] as [დაგეგმვის პერიოდი],
	[სეგმენტი] & '|' & Date(Date#([Date],'YYYY-MM-DD'),'YYYY-MM-DD') as [კონტრაგენტის ჯგუფი (ბიუჯეტისთვის)_დაგეგმვის პერიოდი],
	if(num(month(Date#([Date],'YYYY-MM-DD'))) = num(month($(vNow))),
    	(Floor($(vNow)) - Floor(MonthStart($(vNow))) + 1)/(Floor(MonthEnd($(vNow))) - Floor(MonthStart($(vNow))) + 1),
    	1)*[Value] as [კლიენტები (გეგმა)]
Resident ClientsPlanFromSheets
where floor(Date#([Date], 'YYYY-MM-DD')) >= YearStart($(vNow))
;

drop table ClientsPlanFromSheets;
